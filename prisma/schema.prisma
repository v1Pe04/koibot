generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model achievements {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     Int
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  icon        String    @db.VarChar(255)
  points      Int
  level       Int
  type        Int
  difficulty  Int
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model audit {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type       Int
  attribute  String    @db.VarChar(128)
  user_id    String    @db.VarChar(32)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model cache_rbxaccount_queue {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  roblox_id  String    @unique(map: "cache_rbxaccount_queue_roblox_id_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model clan_log {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  response   Json
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model clan_response {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  response         Json
  current_position Int
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model gamepass {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  pass_id    String    @unique(map: "gamepass_pass_id_unique") @db.VarChar(32)
  asset_id   String    @db.VarChar(16)
  name       String    @db.VarChar(64)
  price      Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model members {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    String    @unique(map: "members_user_id_unique") @db.VarChar(64)
  username   String    @db.VarChar(64)
  in_clan    Boolean
  avatar     String    @db.VarChar(256)
  gamepasses String?   @db.VarChar(255)
  presence   Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model tasks {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  task_id    Int
  task_desc  String    @db.VarChar(256)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model user_achievements {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        Int
  achievement_id Int
  progress       Int
  completed      Boolean
  completed_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model user_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    String    @unique(map: "user_link_user_id_unique") @db.VarChar(32)
  discord_id String    @unique(map: "user_link_discord_id_unique") @db.VarChar(32)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}
